# -*- coding: utf-8 -*-
"""Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rzYtXhEJVrlFFk2KGgRDwbhZFJjmPLBX
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diabetes_dataset = pd.read_csv("diabetes.csv")

diabetes_dataset.head()

diabetes_dataset.shape

"""statistical measeures of the data"""

diabetes_dataset.describe()

diabetes_dataset['Outcome'].value_counts()

"""0 = Non diabitic
1=Diabetic
"""

diabetes_dataset.groupby('Outcome').mean()

# separating data and labels
X = diabetes_dataset.drop(columns = 'Outcome',axis=1)
Y = diabetes_dataset['Outcome']

print(X)
print(Y)

# Data standadization
scaler = StandardScaler()

scaler.fit(X)

"""make te data in same standard , state"""

standadized_data = scaler.transform(X)

print(standadized_data)

X = standadized_data

print(X)
print(Y)

"""split data for testing"""

X_train,X_test,Y_train,Y_test = train_test_split(X,Y, test_size = 0.2,stratify = Y,random_state = 2)

# svm load out support vector modelprint(X.shape, X_train.shape, X_test.shape)

"""Training the model"""

# load our support vector model
classifier =svm.SVC(kernel='linear')

# training the support vector machine classiefier
classifier.fit(X_train,Y_train)

# acuracy score on the training data
X_train_prediction = classifier.predict(X_train)
# x_train_prediction , comparing to original data y_train.
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('accuracy score of trained data = ' , training_data_accuracy)

# acuracy score on the test data..score to which it can predict correct ingo:
X_test_prediction = classifier.predict(X_test)
# x_test_prediction , comparing to original data y_test.
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('accuracy score of test data = ' , test_data_accuracy)

"""making a predictive system"""

input_data = (6,	148,	72,	35	,0,	33.6,	0.627,	50	)
# changing the input data to numpy array
input_data_as_numpy_array = np.asarray(input_data)

# reshape the array as we are predicting for one instance
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)
# standadize the inputed data

std_data = scaler.transform(input_data_reshaped)

print(std_data)
prediction = classifier.predict(std_data)
print(prediction)

# prediction data is a list not an integer
if (prediction[0] == 0):
  print("The person is not diabetic")
else:
  print("The person is diabetic")

